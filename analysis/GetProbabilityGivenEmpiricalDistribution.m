
% Copyright 2020 Gustav Markkula
%
% Permission is hereby granted, free of charge, to any person obtaining a
% copy of this software and associated documentation files (the
% "Software"), to deal in the Software without restriction, including
% without limitation the rights to use, copy, modify, merge, publish,
% distribute, sublicense, and/or sell copies of the Software, and to permit
% persons to whom the Software is furnished to do so, subject to the
% following conditions:
%
% The above copyright notice and this permission notice shall be included
% in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
% OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
% IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
% CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
% TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
% SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%
%%%%%% 
%
% See README.md in the root folder of the Github repository linked below 
% for more information on how to use this code, and a link to the paper 
% describing the study for which the code was developed. If you use this 
% code for your research, please cite that paper.
%
% Github repository: https://github.com/gmarkkula/LoomingDetectionStudy
% Open Science Framework repository: https://doi.org/10.17605/OSF.IO/KU3H4
%



% Copyright 2018 Gustav Markkula
%
% Permission is hereby granted, free of charge, to any person obtaining a
% copy of this software and associated documentation files (the
% "Software"), to deal in the Software without restriction, including
% without limitation the rights to use, copy, modify, merge, publish,
% distribute, sublicense, and/or sell copies of the Software, and to permit
% persons to whom the Software is furnished to do so, subject to the
% following conditions:
%
% The above copyright notice and this permission notice shall be included
% in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
% OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
% IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
% CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
% TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
% SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%
%%%%%% 
%
% See README.pdf for more information on how to use this software.
%
% Software/documentation DOI: https://dx.doi.org/10.17605/OSF.IO/647SY
%


function VScaledProbeProbabilities = ...
  GetProbabilityGivenEmpiricalDistribution(VProbeX, VEmpiricalX, ...
  empiricalDistributionBinSize)

% this function estimates probability of the observations in VProbeX given
% VEmpiricalX (typically generated by simulating a candidate model
% parameterisation a number of times). The data in VEmpiricalX are binned,
% and the counts of VEmpiricalX in the bins are taken as the probabilities
% of the bins. Empty bins thus yield zero probability. 
%
% Esko: Might be nicer to do something like what Daniel N did here using a
% kernel density estimate, i.e. convolve VEmpiricalX with some smooth
% function like a Gaussian or so...

% get empirical probability distribution in range spanned by probe data
VBinEdges = min(VProbeX):empiricalDistributionBinSize:...
  max(VProbeX)+empiricalDistributionBinSize; % add one bin size to avoid the max(VProbeX) getting the probability of VEmpiricalX=max(VProbeX) exactly
VnEmpiricalBinCounts = histc(VEmpiricalX, VBinEdges);
VEmpiricalBinProbabilities = VnEmpiricalBinCounts / length(VEmpiricalX);

% get probability values for probe data
[~, ViProbeBins] = histc(VProbeX, VBinEdges);
VScaledProbeProbabilities = VEmpiricalBinProbabilities(ViProbeBins);