
% Copyright 2020 Gustav Markkula
%
% Permission is hereby granted, free of charge, to any person obtaining a
% copy of this software and associated documentation files (the
% "Software"), to deal in the Software without restriction, including
% without limitation the rights to use, copy, modify, merge, publish,
% distribute, sublicense, and/or sell copies of the Software, and to permit
% persons to whom the Software is furnished to do so, subject to the
% following conditions:
%
% The above copyright notice and this permission notice shall be included
% in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
% OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
% IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
% CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
% TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
% SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%
%%%%%% 
%
% See README.md in the root folder of the Github repository linked below 
% for more information on how to use this code, and a link to the paper 
% describing the study for which the code was developed. If you use this 
% code for your research, please cite that paper.
%
% Github repository: https://github.com/gmarkkula/LoomingDetectionStudy
% Open Science Framework repository: https://doi.org/10.17605/OSF.IO/KU3H4
%


% using the ABC fitting results generated by the do_15... script, creates 
% a large simulated dataset for each participant, model, and 
% model fitting type, storing both response times and model evidence 
% traces, and saving the results in ABCSimulationsForFigures.mat

clearvars
close all force

% general constants
SetLoomingDetectionStudyAnalysisConstants
SetPlottingConstants

% model fitting constants
c_SSettings = GetLoomingDetectionStudyModelFittingConstants;
c_SExperiment = GetLoomingDetectionStudyExperimentConstants(c_SSettings);

% constants defining the simulations here
SSimulatedExperiment = c_SExperiment;
SSimulatedExperiment.bERPIncluded = true;
c_nExperimentUpscaling = 10; % how many times bigger the simulated experiment should be than the real experiment


load([c_sAnalysisResultsPath c_sABCPosteriorsMATFileName])



%%

c_CsModelsToSimulate = {'T', 'A', 'AV', 'AG', 'AVG', 'AVL'};


% loop through models
for iModel = 1:length(c_CsModelsToSimulate)
  
  sModel = c_CsModelsToSimulate{iModel};
  CsFreeParameters = SABCPosteriors.(sModel).CsFreeParameterNames;
  fprintf('\tSimulating model %s...\n', sModel)
  
  % start from an empty dataset per response type being considered
  VbHasData = false * ones(c_nABCFitTypes, 1);
  
  % loop through participants
  for iParticipant = 1:c_nFinalIncludedParticipants
    fprintf('\t\tParticipant %d...\n', iParticipant)
    
    for iABCFitType = 1:c_nABCFitTypes
      
      % get model posterior to simulate from
      SFit = ...
        SABCPosteriors.(sModel).SParticipant(iParticipant).SFitType(iABCFitType);
      
      % posterior available for this fit type?
      if SFit.nRetainedSamples == 0
        continue
      end
      
      % get simulated data
      for iSimExp = 1:c_nExperimentUpscaling
        
        % draw a parameterisation from the posterior
        iThisRetainedSample = randi(SFit.nRetainedSamples);
        SModelParameters = CreateStruct(CsFreeParameters, ...
          SFit.MFreeParametersInRetainedSamples(iThisRetainedSample, :));
        
        % generate simulated data for this parameterisation
        SThisSimulatedDataSet = SimulateDataSetFromModel(...
          SSimulatedExperiment, sModel, SModelParameters, c_SSettings);
        SThisSimulatedDataSet.ViDataSet = ...
          iParticipant * ones(size(SThisSimulatedDataSet.VResponseTime));
        
        % append to the bigger dataset
        if VbHasData(iABCFitType)
          DataSetToAppendTo = SSimulatedDataSet(iABCFitType);
        else
          DataSetToAppendTo = [];
        end
        SSimulatedDataSet(iABCFitType) = AppendTrials(...
          DataSetToAppendTo, SThisSimulatedDataSet, ...
          c_SSettings, SSimulatedExperiment);
        VbHasData(iABCFitType) = true;
        
      end % iSimExp for loop
      
      
    end % iABCFitType for loop
    
  end % iParticipant for loop
  
  % store the simulated dataset in the output structure
  SSimResults.(sModel).SSimulatedData = SSimulatedDataSet;
  
end % iModel for loop




%% save results

fprintf('Saving results...\n')
save([c_sAnalysisResultsPath c_sABCSimulationsForFigsMATFileName], 'SSimResults', '-v7.3')
